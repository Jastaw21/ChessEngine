//
// Created by jacks on 10/07/2025.
//

#ifndef MAGICBITBOARDS_H
#define MAGICBITBOARDS_H
#include <cstdint>
#include <vector>
#include "BoardManager/BitBoards.h"


struct Magic {
    Bitboard mask;
    Bitboard magic;
    int shift;
    std::vector<Bitboard> attacks;
};

class MagicBitBoards {
private:

    Magic rookMagics[64];
    Magic bishopMagics[64];

    const Bitboard rookMagicNumbers[64] = {
                0x2080002080400018ULL, // 0
                0x4040001000402000ULL, // 1
                0x8200084200248010ULL, // 2
                0x480100008018104ULL, // 3
                0x8200100200080420ULL, // 4
                0x80040080020001ULL, // 5
                0x80010002000080ULL, // 6
                0x18008C225000080ULL, // 7
                0x2108800086C00060ULL, // 8
                0x1000402010004000ULL, // 9
                0x642004080120020ULL, // 10
                0x2009002010008901ULL, // 11
                0x4002800802440080ULL, // 12
                0x800400020080ULL, // 13
                0x1024801100800200ULL, // 14
                0x8302000044008102ULL, // 15
                0x4020008080004000ULL, // 16
                0x6040808040002000ULL, // 17
                0x40410020001500ULL, // 18
                0x20080900100101A0ULL, // 19
                0x4801800400E880ULL, // 20
                0x4004008080040200ULL, // 21
                0x8800808002000100ULL, // 22
                0x20014550084ULL, // 23
                0x6100800100204100ULL, // 24
                0x14C2000C0100440ULL, // 25
                0x820200080100080ULL, // 26
                0x6010048080100802ULL, // 27
                0x100040080080080ULL, // 28
                0x42000200040810ULL, // 29
                0x101C100400C20108ULL, // 30
                0x4000004200108401ULL, // 31
                0x40004080800020ULL, // 32
                0x200040401000ULL, // 33
                0x8400802002801000ULL, // 34
                0x4020080080801004ULL, // 35
                0x418001881801400ULL, // 36
                0x82000400808002ULL, // 37
                0x6112480214001009ULL, // 38
                0x28040A2000401ULL, // 39
                0x1040800240018020ULL, // 40
                0x341500020014001ULL, // 41
                0x40884200220010ULL, // 42
                0xD0008100080800ULL, // 43
                0x402000408120020ULL, // 44
                0x150C00410080120ULL, // 45
                0x1000200010004ULL, // 46
                0x8000012040820004ULL, // 47
                0x20A9400B8004A180ULL, // 48
                0x2362084100802600ULL, // 49
                0x104142902A008200ULL, // 50
                0x2008120208402200ULL, // 51
                0x210800800040080ULL, // 52
                0x1020040080020080ULL, // 53
                0x4002080B103400ULL, // 54
                0x8202104510840600ULL, // 55
                0x140082014090A506ULL, // 56
                0x49106280460102ULL, // 57
                0x412002890091ULL, // 58
                0x81000042101ULL, // 59
                0x1000C10A21801ULL, // 60
                0x231000400080201ULL, // 61
                0x10C050210488420CULL, // 62
                0x800D008504102042ULL // 63
            };

    const Bitboard bishopMagicNumbers[64] = {
                0x4080218003100ULL, // 0
                0x5040C8C04012001ULL, // 1
                0x2110011200200002ULL, // 2
                0x8844041086000A04ULL, // 3
                0x1101104043012000ULL, // 4
                0xA010882008800010ULL, // 5
                0x1201809010703810ULL, // 6
                0x5000820090040208ULL, // 7
                0x100020031005011CULL, // 8
                0x40128120088ULL, // 9
                0x20010800C4088480ULL, // 10
                0x50240810400A0ULL, // 11
                0x2418040308000480ULL, // 12
                0x240284110100002ULL, // 13
                0x6210042000ULL, // 14
                0x30120900410ULL, // 15
                0x8311104004288090ULL, // 16
                0x4A0001004014040ULL, // 17
                0x2A48009008821092ULL, // 18
                0x48038082004104ULL, // 19
                0x2100401041808ULL, // 20
                0x200A0000480C1400ULL, // 21
                0x40240008804B000ULL, // 22
                0x1018548104008400ULL, // 23
                0x45A00240080100ULL, // 24
                0x2008082002024800ULL, // 25
                0x51411000111400A0ULL, // 26
                0x40404004010200ULL, // 27
                0x5001001149004000ULL, // 28
                0x28104008806000ULL, // 29
                0x81041001041100ULL, // 30
                0x82820040213403ULL, // 31
                0x1242101304042002ULL, // 32
                0xA227000200122ULL, // 33
                0x22010100100044ULL, // 34
                0x208020080200ULL, // 35
                0x8104040400001100ULL, // 36
                0x380910100020080ULL, // 37
                0x89044110040909ULL, // 38
                0x410C010020084410ULL, // 39
                0x2204142024400820ULL, // 40
                0x612420001020ULL, // 41
                0x8033001388801000ULL, // 42
                0x185401040C204ULL, // 43
                0x40144102101400ULL, // 44
                0x838021002100408ULL, // 45
                0x2421220228400200ULL, // 46
                0x2084081081000020ULL, // 47
                0x24022190080012ULL, // 48
                0x80A0A088404C400ULL, // 49
                0x2002020201040480ULL, // 50
                0x80042020B20ULL, // 51
                0xA10021102020404ULL, // 52
                0xC4078408020101ULL, // 53
                0x400810C40084103AULL, // 54
                0x1030300301202C00ULL, // 55
                0x2002802108224000ULL, // 56
                0x4A008041082040ULL, // 57
                0x8040084201108801ULL, // 58
                0xE0000400420200ULL, // 59
                0x2009000510020204ULL, // 60
                0x80810500080ULL, // 61
                0x890045004080881ULL, // 62
                0x4004011A020110ULL // 63
            };

    void initRookMagics();
    void initBishopMagics();

public:

    void init(){
        initRookMagics();
        initBishopMagics();
    }

private:

    Bitboard generateBishopMask(int square);
    Bitboard generateRookMask(int square);
};


#endif //MAGICBITBOARDS_H
